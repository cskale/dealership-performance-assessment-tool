import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Download, FileText, Table, Image, Mail } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ExportData {
  dealership: any;
  scores: Record<string, number>;
  answers: Record<string, any>;
  recommendations: any[];
  benchmarks?: any[];
}

interface EnhancedExportProps {
  data: ExportData;
}

export const EnhancedExport: React.FC<EnhancedExportProps> = ({ data }) => {
  const { toast } = useToast();

  const generatePDFReport = () => {
    // Simulate PDF generation
    const reportContent = `
DEALERSHIP PERFORMANCE ASSESSMENT REPORT
=====================================

Dealership: ${data.dealership?.name || 'N/A'}
Brand: ${data.dealership?.brand || 'N/A'}
Location: ${data.dealership?.location || 'N/A'}, ${data.dealership?.country || 'N/A'}
Assessment Date: ${new Date().toLocaleDateString()}

EXECUTIVE SUMMARY
================
Overall Performance Score: ${Object.values(data.scores).reduce((a, b) => a + b, 0) / Object.values(data.scores).length}%

SECTION SCORES
==============
${Object.entries(data.scores).map(([section, score]) => 
  `${section.replace('_', ' ').toUpperCase()}: ${score}%`
).join('\n')}

RECOMMENDATIONS
===============
${data.recommendations.map((rec, index) => 
  `${index + 1}. ${rec.title}\n   ${rec.description}\n   Priority: ${rec.priority}\n   Impact: ${rec.impact}\n`
).join('\n')}

DETAILED ANALYSIS
================
[Detailed analysis would include charts, benchmarks, and comprehensive insights]

Generated by Dealership Performance Assessment Tool
Report ID: ${Date.now()}
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${data.dealership?.name || 'dealership'}_assessment_report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "PDF Report Generated",
      description: "Your comprehensive assessment report has been downloaded.",
    });
  };

  const generateExcelReport = () => {
    // Simulate Excel generation with multiple tabs
    const csvData = {
      summary: [
        ['Section', 'Score', 'Benchmark', 'Gap'],
        ...Object.entries(data.scores).map(([section, score]) => [
          section.replace('_', ' ').toUpperCase(),
          score,
          data.benchmarks?.find(b => b.metricName === section)?.averageScore || 75,
          score - (data.benchmarks?.find(b => b.metricName === section)?.averageScore || 75)
        ])
      ],
      responses: [
        ['Question', 'Answer', 'Section'],
        ...Object.entries(data.answers).map(([questionId, answer]) => [
          questionId,
          typeof answer === 'object' ? JSON.stringify(answer) : answer,
          'Various'
        ])
      ],
      recommendations: [
        ['Priority', 'Department', 'Action', 'Description', 'Impact', 'Effort'],
        ...data.recommendations.map(rec => [
          rec.priority,
          rec.department,
          rec.title,
          rec.description,
          rec.impact,
          rec.effort
        ])
      ]
    };

    // Convert to CSV format
    const createCSV = (data: any[]) => {
      return data.map(row => row.join(',')).join('\n');
    };

    const summaryCSV = createCSV(csvData.summary);
    const blob = new Blob([summaryCSV], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${data.dealership?.name || 'dealership'}_assessment_data.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Excel Report Generated",
      description: "Your detailed data export has been downloaded as CSV format.",
    });
  };

  const generateImageReport = () => {
    // Simulate image report generation
    toast({
      title: "Image Report Generated",
      description: "Chart images have been prepared for download.",
    });
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`Assessment Report - ${data.dealership?.name || 'Dealership'}`);
    const body = encodeURIComponent(`
Dear Team,

Please find attached the performance assessment report for ${data.dealership?.name || 'our dealership'}.

Key Highlights:
- Overall Score: ${(Object.values(data.scores).reduce((a, b) => a + b, 0) / Object.values(data.scores).length).toFixed(1)}%
- Assessment Date: ${new Date().toLocaleDateString()}
- Priority Recommendations: ${data.recommendations.filter(r => r.priority === 'critical').length} critical actions identified

This comprehensive analysis provides insights into our operational performance and specific improvement opportunities.

Best regards,
Assessment Team
`);

    window.open(`mailto:?subject=${subject}&body=${body}`);
  };

  const exportFormats = [
    {
      id: 'pdf',
      title: 'Branded PDF Report',
      description: 'Complete assessment with charts, analysis, and recommendations',
      icon: FileText,
      color: 'bg-red-500',
      action: generatePDFReport
    },
    {
      id: 'excel',
      title: 'Excel Workbook',
      description: 'Multi-tab spreadsheet with raw data and calculations',
      icon: Table,
      color: 'bg-green-500',
      action: generateExcelReport
    },
    {
      id: 'images',
      title: 'Chart Images',
      description: 'High-resolution charts and visualizations',
      icon: Image,
      color: 'bg-blue-500',
      action: generateImageReport
    },
    {
      id: 'email',
      title: 'Share via Email',
      description: 'Send summary and recommendations to stakeholders',
      icon: Mail,
      color: 'bg-purple-500',
      action: shareViaEmail
    }
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5" />
          Enhanced Export Options
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {exportFormats.map((format) => (
            <div
              key={format.id}
              className="border rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
              onClick={format.action}
            >
              <div className="flex items-start gap-3">
                <div className={`${format.color} p-2 rounded-lg text-white`}>
                  <format.icon className="h-5 w-5" />
                </div>
                <div className="flex-1">
                  <h3 className="font-medium mb-1">{format.title}</h3>
                  <p className="text-sm text-muted-foreground mb-3">
                    {format.description}
                  </p>
                  <Button size="sm" variant="outline" className="w-full">
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-6 p-4 bg-muted rounded-lg">
          <h4 className="font-medium mb-2">Export includes:</h4>
          <div className="flex flex-wrap gap-2">
            <Badge variant="secondary">Performance Scores</Badge>
            <Badge variant="secondary">Benchmark Comparisons</Badge>
            <Badge variant="secondary">Improvement Actions</Badge>
            <Badge variant="secondary">Historical Trends</Badge>
            <Badge variant="secondary">Industry Analysis</Badge>
            <Badge variant="secondary">Executive Summary</Badge>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};